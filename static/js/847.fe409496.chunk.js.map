{"version":3,"file":"static/js/847.fe409496.chunk.js","mappings":"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","sources":["components/views/Cast.js","components/views/Reviews.js","components/views/MovieDetailsPage.js","services/api.js","webpack://goit-react-hw-05-movies/./src/components/views/style.module.css?2e00"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport fetchAllMovies from 'services/api';\nimport s from './style.module.css';\n\nconst Cast = () => {\n  const [movieData, setMovieData] = useState({});\n  const { movieId } = useParams();\n  const [status, setStatus] = useState('');\n  const [error, setError] = useState(null);\n\n  const getStr = 'movie/' + movieId + '/credits';\n\n  useEffect(() => {\n    fetchAllMovies(getStr, '')\n      .then(data => {\n        setMovieData(data);\n        setStatus('resolved');\n      })\n      .catch(error => {\n        setStatus('rejected');\n        setError(error);\n      });\n  }, [getStr]);\n\n  if (status === 'rejected') {\n    return <h1>{error.message}</h1>;\n  }\n  return (\n    <div>\n      {status === 'resolved' && (\n        <div>\n          <ul className={s.castList}>\n            {movieData.cast.map(item => (\n              <li className={s.castItem} key={item.id}>\n                <div>\n                  {item.profile_path && (\n                    <img\n                      className={s.castImg}\n                      src={\n                        'https://image.tmdb.org/t/p/original' +\n                        item.profile_path\n                      }\n                      alt={item.name}\n                    />\n                  )}\n                  {!item.profile_path && (\n                    <img\n                      className={s.castImg}\n                      src={require('../../no-pictures.jpg')}\n                      alt={item.name}\n                    />\n                  )}\n                  <h2>{item.name}</h2>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport fetchAllMovies from 'services/api';\nimport s from './style.module.css';\n\nconst Reviews = () => {\n  const [movieData, setMovieData] = useState([]);\n  const { movieId } = useParams();\n  const [status, setStatus] = useState('');\n  const [error, setError] = useState(null);\n\n  const getStr = 'movie/' + movieId + '/reviews';\n\n  console.log('movieData=', movieData);\n  useEffect(() => {\n    fetchAllMovies(getStr, '')\n      .then(data => {\n        setMovieData(data.results);\n        setStatus('resolved');\n      })\n      .catch(error => {\n        setStatus('rejected');\n        setError(error);\n      });\n  }, [getStr]);\n\n  if (status === 'rejected') {\n    return <h1>{error.message}</h1>;\n  }\n\n  return (\n    <div>\n      {status === 'resolved' && movieData.length > 0 && (\n        <div>\n          <ul className={s.reviewsList}>\n            {movieData.map(item => (\n              <li className={s.reviewsItem} key={item.id}>\n                <span className={s.reviewsAuthorTitle}>Author:</span>\n                <span className={s.reviewsAuthor}> {item.author}</span>\n                <div>\n                  <span className={s.reviewsTitle}>Review:</span>\n                  <p>{item.content}</p>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n      {movieData.length === 0 && <div>There is no reviews</div>}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import { useEffect, useState } from 'react';\nimport { useParams, Route, Routes, NavLink } from 'react-router-dom';\nimport Notiflix from 'notiflix';\n\nimport Cast from './Cast';\nimport Reviews from './Reviews';\nimport fetchAllMovies from 'services/api';\nimport s from './style.module.css';\n\nconst MovieDetailsPage = () => {\n  const [movieData, setMovieData] = useState({});\n  const [posterPath, setPosterPath] = useState('');\n  const [status, setStatus] = useState('');\n  const [error, setError] = useState(null);\n\n  let { movieId } = useParams();\n\n  const getStr = 'movie/' + movieId;\n\n  useEffect(() => {\n    fetchAllMovies(getStr, '')\n      .then(data => {\n        setMovieData(data);\n        setStatus('resolved');\n        setPosterPath('https://image.tmdb.org/t/p/original' + data.poster_path);\n        if (data.length === 0) {\n          Notiflix.Notify.failure('Sorry, something wrong happened.');\n          return;\n        }\n      })\n      .catch(error => {\n        setStatus('rejected');\n        setError(error);\n      });\n  }, [getStr]);\n\n  if (status === 'rejected') {\n    return <h1>{error.message}</h1>;\n  }\n\n  return (\n    <div>\n      {status === 'resolved' && (\n        <div>\n          <div className={s.movieDescription}>\n            <img\n              className={s.img}\n              src={posterPath}\n              alt={movieData.original_title}\n              width=\"200\"\n            />\n            <div>\n              <h1 className={s.title}>\n                {movieData.original_title} (\n                {movieData.release_date.split('-', 1)})\n              </h1>\n              <span className={s.score}>\n                User score: {movieData.vote_average}\n              </span>\n              <h3 className={s.subtitle}>Overview</h3>\n              <p className={s.overview}>{movieData.overview}</p>\n              <h3 className={s.subtitle}>Genres</h3>\n              <p className={s.overview}>\n                {movieData.genres.map(genre => (\n                  <span className={s.genres}>{genre.name}</span>\n                ))}\n              </p>\n            </div>\n          </div>\n          <div className={s.movieAdditional}>\n            <ul className={s.movieAdditionalList}>\n              <li>\n                <NavLink to=\"cast\">Cast</NavLink>\n              </li>\n              <li>\n                <NavLink to=\"reviews\">Reviews</NavLink>\n              </li>\n            </ul>\n            <Routes>\n              <Route path=\"cast\" element={<Cast />} />\n              <Route path=\"reviews\" element={<Reviews />} />\n            </Routes>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MovieDetailsPage;\n","const apiKey = '933eb3a4e274b288a58d48cbb1a686ce';\nconst baseUrl = 'https://api.themoviedb.org/3/';\n\nexport default function fetchAllMovies(getStr, searchStr) {\n  const resUrl = baseUrl + getStr + '?api_key=' + apiKey + searchStr;\n  console.log(resUrl);\n  return fetch(resUrl).then(res => {\n    if (!res.ok) {\n      return Promise.reject(new Error('Something wrong happened'));\n    }\n    return res.json();\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__tfnjJ\",\"list\":\"style_list__e2m2w\",\"img\":\"style_img__j9z4o\",\"movieDescription\":\"style_movieDescription__NYLLz\",\"title\":\"style_title__971HD\",\"score\":\"style_score__9GtIO\",\"subtitle\":\"style_subtitle__RhGMt\",\"overview\":\"style_overview__M9nDW\",\"genres\":\"style_genres__qMb8A\",\"movieAdditional\":\"style_movieAdditional__QnrqR\",\"movieAdditionalList\":\"style_movieAdditionalList__5LAUO\",\"castList\":\"style_castList__PpWrV\",\"castItem\":\"style_castItem__S8s7z\",\"castImg\":\"style_castImg__zvS8g\",\"reviewsAuthor\":\"style_reviewsAuthor__uGRGo\",\"reviewsItem\":\"style_reviewsItem__FaQfG\",\"reviewsTitle\":\"style_reviewsTitle__HGs9E\",\"reviewsAuthorTitle\":\"style_reviewsAuthorTitle__jRnuw\",\"homeTitle\":\"style_homeTitle__r7o21\"};"],"names":["useState","movieData","setMovieData","movieId","useParams","status","setStatus","error","setError","getStr","useEffect","fetchAllMovies","then","data","catch","message","className","s","cast","map","item","profile_path","src","alt","name","require","id","console","log","results","length","author","content","posterPath","setPosterPath","poster_path","Notiflix","original_title","width","release_date","split","vote_average","overview","genres","genre","to","path","element","searchStr","resUrl","baseUrl","fetch","res","ok","json","Promise","reject","Error"],"sourceRoot":""}